Majority Element II

// brute force 

// class Solution {
// public:
//     vector<int> majorityElement(vector<int>& nums) {
//         vector<int> sol; 
//         int n = nums.size();
//         for(int i=0; i<n; i++){
//             int count = 0;
//             for(int j=0; j<n; j++){
//                 if (nums[i] == nums[j])
//                 {
//                     count++;
//                 }
//             }
//             if (count > n/3)
//             {
//                 //cout << "element" << nums[i] << " count " << count << " Total " << n/3 << endl; 
//                 bool isPresent = false;
//                 for(int z=0; z < sol.size(); z++){
//                     if (sol[z] == nums[i]){
//                         isPresent = true;
//                         break;
//                     }
//                 }
//                 if (isPresent == false) {
//                     sol.push_back(nums[i]);
//                 }
//             }
//         }
//         return sol;
//     }
// };

// using sorting 
// class Solution {
// public:
//     vector<int> majorityElement(vector<int>& nums) {
//         vector<int> sol; 
//         int n = nums.size();
//         int count = 1;
//         if (n == 1){
//             return nums;
//         }
//         sort(nums.begin(), nums.end());

//         for(int i=0; i<n-1; i++){
//             if (nums[i] == nums[i+1]){
//                 count++;
//             }else{
//                 if (count > n/3)
//                 {
//                     sol.push_back(nums[i]);
//                 }
//                 count = 1;
//             }
//         }
//         if (count > n/3)
//             { 
//                 sol.push_back(nums[n-1]);
//             }
//         return sol;
//     }
// };

// using hashmap 
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        int n = nums.size();
        if (n == 1){
            return nums;
        }

        vector<int> sol; 
        map<int, int> mpp;

        for(int i=0; i<n-1; i++){
            mpp[nums[i]]++;
            if (mpp[nums[i]] == (n/3)+1) 
            {
                sol.push_back(nums[i]);
            }
        }
        return sol;
    }
};

class Solution {
public:
vector<int> majorityElement(vector<int>& v) {
    int n = v.size(); //size of the array

    int cnt1 = 0, cnt2 = 0; // counts
    int el1 = INT_MIN; // element 1
    int el2 = INT_MIN; // element 2

    // applying the Extended Boyer Moore's Voting Algorithm:
    for (int i = 0; i < n; i++) {
        if (cnt1 == 0 && el2 != v[i]) {
            cnt1 = 1;
            el1 = v[i];
        }
        else if (cnt2 == 0 && el1 != v[i]) {
            cnt2 = 1;
            el2 = v[i];
        }
        else if (v[i] == el1) cnt1++;
        else if (v[i] == el2) cnt2++;
        else {
            cnt1--, cnt2--;
        }
    }

    vector<int> ls; // list of answers

    // Manually check if the stored elements in
    // el1 and el2 are the majority elements:
    cnt1 = 0, cnt2 = 0;
    for (int i = 0; i < n; i++) {
        if (v[i] == el1) cnt1++;
        if (v[i] == el2) cnt2++;
    }

    int mini = int(n / 3) + 1;
    if (cnt1 >= mini) ls.push_back(el1);
    if (cnt2 >= mini) ls.push_back(el2);

    

    return ls;
}
};
